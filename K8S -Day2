# Kubernetes Cluster Setup Guide

---

## 1. Self-Managed Kubernetes Cluster

### 1.1 Minikube (Single Node Cluster)
- Lightweight Kubernetes implementation for learning/testing.

### 1.2 Kubeadm (Multi-Node Cluster)
- Production-grade setup with separate control plane and worker nodes.

> Note: Kubernetes handles pod failures automatically. Node failures are **not** automatically recovered and must be addressed manually by the administrator.

---

## 2. Cloud Managed Kubernetes Cluster

### 2.1 AWS - EKS (Elastic Kubernetes Service)
### 2.2 Azure - AKS (Azure Kubernetes Service)
### 2.3 Google - GKE (Google Kubernetes Engine)

> Note: Pod failures are managed by Kubernetes. Node-level issues are handled by the respective cloud provider.

---

## Cluster Topology
- 1 Master Node
- 2 Worker Nodes

---

## Agenda: Kubernetes Setup Using Kubeadm on AWS EC2 Ubuntu Servers with containerd Runtime

### Prerequisites
- 3 Ubuntu EC2 Instances:
  - 1 Master (t2.medium: 4GB RAM, 2 vCPUs)
  - 2 Workers (t2.micro: 1GB RAM, 1 vCPU)
- Open all traffic temporarily in security groups.

---

## Common Setup (Master & Worker Nodes)

### 1. Switch to root
```bash
sudo su -
```

### 2. Disable Swap
```bash
swapoff -a
sed -i '/ swap / s/^/#/' /etc/fstab
```

### 3. Kernel Settings for Container Networking
```bash
cat <<EOF | tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

modprobe overlay
modprobe br_netfilter

cat <<EOF | tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF

sysctl --system
```

### 4. Install Containerd Runtime
```bash
apt-get update -y
apt-get install -y ca-certificates curl gnupg lsb-release

mkdir -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg

echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null

apt-get update -y
apt-get install -y containerd.io

containerd config default > /etc/containerd/config.toml
sed -i 's/SystemdCgroup = false/SystemdCgroup = true/g' /etc/containerd/config.toml

systemctl restart containerd
systemctl enable containerd
```

### 5. Install Kubernetes Tools
```bash
apt-get install -y apt-transport-https ca-certificates curl
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /" \
  > /etc/apt/sources.list.d/kubernetes.list

apt-get update -y
apt-get install -y kubelet kubeadm kubectl
apt-mark hold kubelet kubeadm kubectl

systemctl daemon-reexec
systemctl start kubelet
systemctl enable kubelet
```

---

## Master Node Setup
```bash
kubeadm init --cri-socket /run/containerd/containerd.sock
```

### Configure kubectl
```bash
exit
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
```

### Verify
```bash
kubectl get nodes
kubectl get pods -n kube-system -o wide
```

### Install CNI Plugin (Choose one)
- **Weave Net:**
```bash
kubectl apply -f https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml
```
- **Calico:**
```bash
# kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml
```

### Get Join Token
```bash
kubeadm token create --print-join-command

#Add Token in Worker Node for connection established 
```

---

## Worker Node Setup
- Run the join command from the master output.

---

## Verifications on Master node
```bash
kubectl get nodes
kubectl get pods --all-namespaces
```

---

## Deploy a Sample Application
```bash
kubectl create namespace prod
kubectl run nginx-demo --image=nginx --port=80 --namespace=prod
kubectl expose pod nginx-demo --port=80 --target-port=80 --type=NodePort --namespace=prod
kubectl get services -n prod
```

---=======================END=================================

## Kubernetes API Resources
- **Workloads:** Pod, Deployment, ReplicaSet, DaemonSet, StatefulSet
- **Configuration:** ConfigMap, Secret
- **Networking:** Service, Ingress, NetworkPolicy
- **Storage:** PersistentVolumeClaim, PersistentVolume

---

## Common Questions

### What is a cluster?
A group of Kubernetes nodes working together.

### What is a node?
A physical or virtual machine that runs Kubernetes workloads.

### How to list all Kubernetes resources?
```bash
kubectl api-resources
```

---

## Kubernetes Namespaces

### Creating a Namespace (YAML)
```yaml
apiVersion: v1
kind: Namespace
metadata:
  name: my-namespace
  labels:
    name: my-namespace
```
```bash
kubectl apply -f namespace.yaml
```

### Creating via CLI
```bash
kubectl create namespace my-namespace
```

### Listing Namespaces
```bash
kubectl get namespaces
```

### Describing a Namespace
```bash
kubectl describe ns my-namespace
```

### Deleting a Namespace
```bash
kubectl delete namespace my-namespace
```

### Using Namespaces in Resources
```yaml
apiVersion: v1
kind: Pod
metadata:
  name: my-pod
  namespace: my-namespace
spec:
  containers:
  - name: nginx
    image: nginx
```

### Switch Namespace Context
```bash
kubectl config set-context --current --namespace=prod
```

### Resource Quotas (YAML)
```yaml
apiVersion: v1
kind: ResourceQuota
metadata:
  name: my-resource-quota
  namespace: prod
spec:
  hard:
    pods: "10"
```
```bash
kubectl apply -f resource-quota.yaml
```

---


